{"remainingRequest":"/Users/janice/WEBAPP/studentBoard/public/project/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/janice/WEBAPP/studentBoard/public/project/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/janice/WEBAPP/studentBoard/public/project/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/janice/WEBAPP/studentBoard/public/project/src/views/BKcruise.vue?vue&type=template&id=3a20d178&","dependencies":[{"path":"/Users/janice/WEBAPP/studentBoard/public/project/src/views/BKcruise.vue","mtime":1594451493000},{"path":"/Users/janice/WEBAPP/studentBoard/public/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/janice/WEBAPP/studentBoard/public/project/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/janice/WEBAPP/studentBoard/public/project/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/janice/WEBAPP/studentBoard/public/project/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}